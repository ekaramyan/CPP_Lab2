#include <iostream>
#include "Vector.h"
#include "Matrix.h"

using namespace std;
//Карамян Эдуард, ИВТ-4, 4 вариант

/*Написать классы Vector и Matrix для хранения и обработки одномерных и двумерных массивов, соответственно. 
Реализовать задание 2 лабораторной работы №1 с помощью созданных классов. Все функции оформить в виде методов классов.
В коде отразить следующее:
- Выделение и освобождение динамической памяти производить в конструкторах и деструкторах классов, соответственно.
- В классе Vector перегрузить оператор индексации []. 
  В классе Matrix добавить методы T at(int i, int j) const и setAt(int i, int j, T val), которые позволяют получить и
  установить значение элемента массива с индексом [i][j], T – это тип элементов массива по варианту (int или double).
- Перегрузить операторы инкремента и декремента (как префиксного, так и постфиксного).
Смысл инкремента / декремента всего массива заключается в инкременте / декременте каждого элемента массива.2.*/

// 2 задание 1 лабораторной работы:

/*Написать программу, которая преобразует одномерный массив (1D) в двумерный (2D)
(или наоборот), в соответствии с вариантом. Необходимо оформить в отдельных
функциях код следующих действий: 1) инициализация массива; 2) вывод массива; 3)
преобразование массива (создание нового массива с другой структурой). Память под
массивы выделять динамически и для доступа к элементам использовать указатели.
Ввод-вывод данных организовать средствами iostream и iomanip.*/

/*Преобразование: 2D → 1D. Двумерный массив 5х3 вещественных чисел необходимо
выложить в один ряд по элементам слева направо и снизу вверх.
Инициализация: заполнить массив числами x[i][j] = sin(i–j) + cos(i+j).
Вывод на экран: на каждый элемент массива отвести 14 позиций.
[ 1 -0.3012 -1.325
 1.382 -0.4161 -1.831
 0.4932 -0.1485 -0.6536
 -0.8489 0.2557 1.125
 -1.41 0.4248 1.869 ]
=>
[ -1.41 0.4248 1.869 -0.8489 0.2557 1.125 0.4932 -0.1485 -0.6536 1.382
 -0.4161 -1.831 1 -0.3012 -1.325 ]*/

int main()
{
	setlocale(LC_ALL, "Rus"); //лень было на английском писать все:)
	Matrix matrix;
	Vector vector;

	matrix.initializeMatrix();
	matrix.printMatrix();
	cout << endl;

	cout << "Элемент под индексом 4,2: " << matrix.at(4, 2) << endl;
	matrix.setAt(4, 2, 7.98);
	cout << "Элемент под индексом 4,2 после его замены на 7.98: " << matrix.at(4, 2) << endl;
	++matrix;
	matrix.printMatrix();
	cout <<"элементы массива увеличены на 1\n" <<endl; 
	matrix--;
	matrix.printMatrix();
	cout <<"элементы массива уменьшены на 1 \n" <<endl;

	vector.makeVector(matrix.getMatrix());
	vector.printVector();
	cout <<  endl;

	cout << "Элемент массива под индексом 13:" << vector.operator[](13) << endl;
	++vector;
	vector.printVector();
	cout << "элементы массива увеличены на 1\n" << endl;
	vector--;
	vector.printVector();
	cout << "элементы массива уменьшены на 1 \n" << endl;
	return 0;
}
